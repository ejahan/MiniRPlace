{"mappings":"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","sources":["packages/website/js/index.js"],"sourcesContent":["const socket = io('http://localhost:3004');\nlet ip;\n\nsocket.on('connect', () => {\n    socket.emit('connected', 'Connected');\n});\n\nfetch('https://api.ipify.org?format=json')\n    .then(response => response.json())\n    .then(data => {\n        ip = data.ip;\n    })\n    .catch(error => {\n        console.log('Error:', error);\n});\n\n\nsocket.on('color_changed', (data) => {\n    console.log(data);\n    fetch('http://localhost:3003/canvas')\n        .then(response => response.json())\n        .then(data => {\n            for (let i = 0; i < data.length; i++) {\n                for (let j = 0; j < data[i].length; j++) {\n                    const cell = canvas.querySelector(`tr:nth-child(${i + 1}) td:nth-child(${j + 1})`);\n                    if (cell) {\n                        cell.style.backgroundColor = data[i][j];\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.log('Error:', error);\n        });\n});\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById('canvas');\n  const colorPicker = document.getElementById('color-picker');\n  const rows = 20;\n  const cols = 20;\n\n  canvas.tabIndex = 0;\n  for (let i = 0; i < rows; i++) {\n      const row = document.createElement('tr');\n      row.tabIndex = 0;\n      for (let j = 0; j < cols; j++) {\n          const cell = document.createElement('td');\n          cell.tabIndex = 0;\n\n          const change_color = () => {\n            const color = colorPicker.value;\n            const time = Date.now();\n\n            fetch('http://localhost:3003/update-color', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({ ip, row: i, col: j, color, time })\n            })\n                .then(response => response.json())\n                .then(res => {\n                    if (res.success) {\n                    cell.style.backgroundColor = color;\n                    cell.style.animation = 'rotating 1s';\n                    socket.emit('message', 'A color has been changed');\n                    }\n                })\n                .catch(error => {\n                    console.log('Error:', error);\n                });\n          }\n\n          cell.addEventListener(\"keydown\", (e) => {\n            if (e.key === 'Enter')\n              change_color();\n          });\n          cell.addEventListener('click', change_color);\n\n          row.appendChild(cell);\n      }\n      canvas.appendChild(row);\n  }\n\n  fetch('http://localhost:3003/canvas')\n      .then(response => response.json())\n      .then(data => {\n          for (let i = 0; i < data.length; i++) {\n              for (let j = 0; j < data[i].length; j++) {\n                  const cell = canvas.querySelector(`tr:nth-child(${i + 1}) td:nth-child(${j + 1})`);\n                  if (cell) {\n                      cell.style.backgroundColor = data[i][j];\n                  }\n              }\n          }\n      })\n      .catch(error => {\n          console.log('Error:', error);\n      });\n});\n"],"names":[],"version":3,"file":"index.ddd964f9.js.map","sourceRoot":"/__parcel_source_root/"}